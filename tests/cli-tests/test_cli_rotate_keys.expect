#!/usr/bin/env expect

# Set timeout for commands
set timeout 10

# Generate a random number between 0 and 100
set random_value [expr {int(rand() * 100)}]

# Start the CLI program
spawn bash kc create-id "$random_value" local

# Expect the output to match a string like did:test followed by some characters (e.g., did:test12345)
expect {
    -re "(did:test:\[a-zA-Z0-9]+)" {
        set captured_did $expect_out(1,string)
        puts "\n✅ Captured DID: $captured_did"
    }
    timeout {
        puts "\n❌ Timeout waiting for expected output"
        exit 1
    }
}


# Resolve did
spawn bash kc resolve-id

# Wait for the JSON output
expect {
    -re {.*"id": "(#key-[^"]+)".*} {
        set verification_id $expect_out(1,string)
    }
}

# Reset the file pointer and search for x value
spawn bash kc resolve-id
expect {
    -re {.*"x": "([^"]+)".*} {
        set x_value $expect_out(1,string)
    }
}

# Reset the file pointer and search for y value
spawn bash kc resolve-id
expect {
    -re {.*"y": "([^"]+)".*} {
        set y_value $expect_out(1,string)
    }
}

# Output the extracted values
send_user "\nExtracted values:\n"
send_user "verificationMethod.id: $verification_id\n"
send_user "verificationMethod.publicKeyJwk.x: $x_value\n"
send_user "verificationMethod.publicKeyJwk.y: $y_value\n"

# Rotate keys
spawn bash kc rotate-keys

expect {
    # Pass if "OK" is found
    -re "OK" {
        puts "Success, found 'OK' in output \n✅"
    }

    # Timeout handling
    timeout {
        puts "Timeout occurred \n❌"
        exit 1
    }
    eof {
        puts "\n❌ End of file reached without finding a match"
        exit 1
    }
}

# Resolve did again to see new keys
spawn bash kc resolve-id

# Wait for the JSON output
expect {
    -re {.*"id": "(#key-[^"]+)".*} {
        set verification_id_2 $expect_out(1,string)
    }
}

# Reset the file pointer and search for x value
spawn bash kc resolve-id
expect {
    -re {.*"x": "([^"]+)".*} {
        set x_value_2 $expect_out(1,string)
    }
}

# Reset the file pointer and search for y value
spawn bash kc resolve-id
expect {
    -re {.*"y": "([^"]+)".*} {
        set y_value_2 $expect_out(1,string)
    }
}

# Output the extracted values
send_user "\nExtracted values:\n"
send_user "verificationMethod.id: $verification_id_2\n"
send_user "verificationMethod.publicKeyJwk.x: $x_value_2\n"
send_user "verificationMethod.publicKeyJwk.y: $y_value_2\n"

# Compare the values and assert they are not the same
send_user "\nComparing values...\n"

# Compare id with id2
if {$verification_id == $verification_id_2} {
    send_user "\n❌ ERROR: verification_ids are the same!\n"
    exit 1
} else {
    send_user "\n✅ PASS: verification_ids are different\n"
}

# Compare y with y2
if {$y_value == $y_value_2} {
    send_user "\n❌ ERROR: y_values are the same!\n"
    exit 1
} else {
    send_user "\n✅ PASS: y_values are different\n"
}

# Compare x with x2
if {$x_value == $x_value_2} {
    send_user "\n❌ ERROR: x_values are the same!\n"
    exit 1
} else {
    send_user "\n✅ PASS: x_values are different\n"
}

send_user "\nAll values are different. Assertion passed!\n"

# Clean up
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n✅ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n❌ DB Reset Failed!.\n"
        exit 1
    }
}

# Delete Wallet
set script_dir [file dirname [file normalize [info script]]]

# Navigate one level up from script directory, then into kc/data/wallet.json
set filepath [file join $script_dir ../../data/wallet.json]

# Normalize the path to get an absolute reference
set abs_filepath [file normalize $filepath]

# Check if the file exists
if {[file exists $abs_filepath]} {
    puts "File exists: $abs_filepath"
    # Delete the file
    file delete -force $abs_filepath
    puts "File deleted: $abs_filepath"
} else {
    puts "File not found: $abs_filepath"
}

spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n✅ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n❌ Wallet Reset Failed!.\n"
        exit 1
    }
}

# Exit the script
exit 0