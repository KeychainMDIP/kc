#!/usr/bin/env expect

# Set timeout to avoid infinite waits
set timeout 10

# Generate a random number between 0 and 100
set random_value [expr {int(rand() * 100)}]

# Start the CLI program
spawn bash kc create-id "$random_value" local

# Expect the output to match a string like did:test followed by some characters (e.g., did:test12345)
expect {
    "did:test*" { 
        puts "\n✅ Matched did:test output"
    }
    timeout {
        puts "\n❌ Timeout waiting for expected output"
    }
}

# Start the command you want to test
spawn bash kc list-ids

# Wait for the output and check if '<<< current' is present
expect {
    "<<< current" {
        send_user "\n✅ Test Passed: '<<< current' found in output.\n"
        exit 0
    }
    timeout {
        send_user "\n❌ Test Failed: '<<< current' not found in output.\n"
        exit 1
    }
    eof {
        send_user "\n❌ Test Failed: Unexpected end of output, '<<< current' not found.\n"
        exit 1
    }
}

# Clean up
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n✅ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n❌ DB Reset Failed!.\n"
        exit 1
    }
}

# Delete Wallet
set script_dir [file dirname [file normalize [info script]]]

# Navigate one level up from script directory, then into kc/data/wallet.json
set filepath [file join $script_dir ../../data/wallet.json]

# Normalize the path to get an absolute reference
set abs_filepath [file normalize $filepath]

# Check if the file exists
if {[file exists $abs_filepath]} {
    puts "File exists: $abs_filepath"
    # Delete the file
    file delete -force $abs_filepath
    puts "File deleted: $abs_filepath"
} else {
    puts "File not found: $abs_filepath"
}

spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n✅ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n❌ Wallet Reset Failed!.\n"
        exit 1
    }
}
