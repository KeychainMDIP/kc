#!/usr/bin/env expect

# Set timeout to avoid infinite waits
set timeout 30

#debugger
log_user 1


# Start the CLI program you want to test
spawn bash kc create-id "qa-issue-creds" local

# Expect the output to match a string like did:test followed by some characters (e.g., did:test12345)
expect {
    -re "(did:test:\[a-zA-Z0-9]+)" {
        set captured_did $expect_out(1,string)
        puts "\n‚úÖ Captured DID: $captured_did"
    }
    timeout {
        puts "\n‚ùå Timeout waiting for expected output"
        exit 1
    }
}

# Start the CLI program
spawn bash kc create-schema -n "nickname-template" share/schema/social-media.json

# Look for the specific DID pattern
expect {
    -re "(did:test:\[a-zA-Z0-9]+)" {
        set captured_did_1 $expect_out(1,string)
        puts "\n‚úÖ Captured DID: $captured_did_1"
    }
    timeout {
        puts "\n‚ùå Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n‚ùå End of file reached without finding a match"
        exit 1
    }
}

# Verify the captured DID
if {$captured_did_1 eq ""} {
    puts "No DID was captured! \n‚ùå"
    exit 1
}

# Use the captured value in another function call
spawn bash -c {kc bind-credential nickname-template qa-issue-creds > qa-credential.json}
sleep 2
spawn bash -c {jq '.credential.nickname |= "qa"' qa-credential.json > qa-credential-final.json}
sleep 2
spawn bash -c "docker compose cp qa-credential-final.json cli:/app/share"
sleep 2
spawn bash -c "kc issue-credential share/qa-credential-final.json"
sleep 1
expect {
    -re {(did:test:[a-zA-Z0-9]+)} {
        set captured_did_2 $expect_out(1,string)
        puts "\n‚úÖ Captured DID: $captured_did_2"
    }
    timeout {
        puts "\n‚ùå Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n‚ùå End of file reached without finding a match"
        exit 1
    }
}

spawn bash -c "kc accept-credential $captured_did_2 nicknames"

expect {
    # Pass if "OK" is found
    -re "OK" {
        puts "Success, found 'OK' in output \n‚úÖ"
    }

    # Timeout handling
    timeout {
        puts "Timeout occurred \n‚ùå"
        exit 1
    }

    # Default match (successful case)
    eof {
        puts "Process completed successfully \n‚úÖ"
        exit 0
    }
}

spawn bash -c "kc get-credential $captured_did_2"

# Wait for and capture the full output
expect {
    -re "{.*}" {
        set output $expect_out(0,string)
    }
    timeout {
        puts "Test failed: Timeout waiting for output."
        exit 1
    }
}

# Validation procedure
proc validate_schema_output {output} {
    # Initialize validation tracking
    set validation_passed 1
    set validation_details {}

    # Define exact required keys
    set required_keys [list \
        "\@context" \
        "type" \
        "issuer" \
        "validFrom" \
        "credentialSubject" \
        "credential" \
        "signature" \
    ]
    # Detailed validation results for all keys
set validated_keys {}

    # Check for presence of each required key
    foreach key $required_keys {
        if {[string first "\"$key\":" $output] != -1} {
            # Check if the key has a non-null value
            if {![regexp "\"$key\"\\s*:\\s*null" $output]} {
                lappend validated_keys "\n‚úÖ Key present and not null: $key"
            } else {
                lappend validation_details "\n‚ùå Null value for key: $key"
                set validation_passed 0
            }
        } else {
            lappend validation_details "\n‚ùå Missing key: $key"
            set validation_passed 0
        }
    }

    # Print out all validation details
    puts "\nValidation Details:"

    # Print validated keys first
    foreach detail $validated_keys {
        puts $detail
    }

    # Then print any failure details
    foreach detail $validation_details {
        puts $detail
    }

    # Final validation summary
    if {$validation_passed} {
        puts "\n‚úÖ Validation Passed: All required keys present, no null values"
        return 1
    } else {
        puts "\nüî¥ Validation Failed: Missing or null values found"
        return 0
    }
}

# Clean up
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n‚úÖ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå DB Reset Failed!.\n"
        exit 1
    }
}

foreach {key val} $argv {
    if {$key == "--ci-json"} {
        # Run docker exec to delete the file
        set result [exec docker exec kc-gatekeeper-1 rm -rf /app/gatekeeper/data/wallet.json]

        # Print result
        puts "Deleted wallet.json!"
        
    } elseif {$key == "--local"} {
        # Delete Wallet
        set script_dir [file dirname [file normalize [info script]]]

        # Navigate one level up from script directory, then into kc/data/wallet.json
        set filepath [file join $script_dir ../../data/wallet.json]

        # Normalize the path to get an absolute reference
        set abs_filepath [file normalize $filepath]

        # Check if the file exists
        if {[file exists $abs_filepath]} {
            puts "File exists: $abs_filepath"
            # Delete the file
            file delete -force $abs_filepath
            puts "File deleted: $abs_filepath"
        } else {
            puts "File not found: $abs_filepath"
        }
        
    } elseif {$key == "--ci-redis"} {
        # Run docker exec to delete the file
        set result [exec docker compose exec redis redis-cli flushall]

        # Print result
        puts "Resetted Redis!"
    }
}

spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n‚úÖ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå Wallet Reset Failed!.\n"
        exit 1
    }
}

