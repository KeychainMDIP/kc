#!/usr/bin/env expect

# Set timeout to avoid infinite waits
set timeout 10

# Generate a random number between 0 and 100
set random_value [expr {int(rand() * 100)}]

# Start the CLI program you want to test
spawn bash kc create-id "$random_value"

# Look for the specific DID pattern
expect {
    -re "(did:test:\[a-zA-Z0-9]+)" {
        set captured_did $expect_out(1,string)
        puts "\n‚úÖ Captured DID: $captured_did"
    }
    timeout {
        puts "\n‚ùå Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n‚ùå End of file reached without finding a match"
        exit 1
    }
}

# Verify the captured DID
if {$captured_did eq ""} {
    puts "No DID was captured! \n‚ùå"
    exit 1
}

# Start the CLI Test
spawn bash kc create-schema share/schema/social-media.json testing

# Look for the specific DID pattern
expect {
    -re "(did:test:\[a-zA-Z0-9]+)" {
        set captured_did $expect_out(1,string)
        puts "\n‚úÖ Captured DID: $captured_did"
    }
    timeout {
        puts "\n‚ùå Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n‚ùå End of file reached without finding a match"
        exit 1
    }
}

# Verify the captured DID
if {$captured_did eq ""} {
    puts "No DID was captured! \n‚ùå"
    exit 1
}


# Start the CLI program
spawn bash -c "kc create-schema-template $captured_did"

# Wait for and capture the full output
expect {
    -re "{.*}" {
        set output $expect_out(0,string)
    }
    timeout {
        puts "Test failed: Timeout waiting for output."
        exit 1
    }
}

# Validation procedure
proc validate_wallet_output {output} {
    # Initialize validation tracking
    set validation_passed 1
    set validation_details {}

    # Define exact required keys
    set required_keys [list \
        "nickname" \
        "\$schema" \
    ]

# Detailed validation results for all keys
set validated_keys {}

    # Check for presence of each required key
    foreach key $required_keys {
        if {[string first "\"$key\":" $output] != -1} {
            # Check if the key has a non-null value
            if {![regexp "\"$key\"\\s*:\\s*null" $output]} {
                lappend validated_keys "\n‚úÖ Key present and not null: $key"
            } else {
                lappend validation_details "\n‚ùå Null value for key: $key"
                set validation_passed 0
            }
        } else {
            lappend validation_details "\n‚ùå Missing key: $key"
            set validation_passed 0
        }
    }

    # Print out all validation details
    puts "\nValidation Details:"
    
    # Print validated keys first
    foreach detail $validated_keys {
        puts $detail
    }

    # Then print any failure details
    foreach detail $validation_details {
        puts $detail
    }

    # Final validation summary
    if {$validation_passed} {
        puts "\n‚úÖ Validation Passed: All required keys present, no null values"
    } else {
        puts "\nüî¥ Validation Failed: Missing or null values found"
        exit 1
    }
}

# Clean up
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n‚úÖ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå DB Reset Failed!.\n"
        exit 1
    }
}

foreach {key val} $argv {
    if {$key == "--ci"} {
        # Run docker exec to delete the file
        set result [exec docker exec kc-gatekeeper-1 rm -rf /app/gatekeeper/data/wallet.json]

        # Print result
        puts "Deleted wallet.json!"
        
    } elseif {$key == "--local"} {
        # Delete Wallet
        set script_dir [file dirname [file normalize [info script]]]

        # Navigate one level up from script directory, then into kc/data/wallet.json
        set filepath [file join $script_dir ../../data/wallet.json]

        # Normalize the path to get an absolute reference
        set abs_filepath [file normalize $filepath]

        # Check if the file exists
        if {[file exists $abs_filepath]} {
            puts "File exists: $abs_filepath"
            # Delete the file
            file delete -force $abs_filepath
            puts "File deleted: $abs_filepath"
        } else {
            puts "File not found: $abs_filepath"
        }
        
    }
}

spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n‚úÖ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå Wallet Reset Failed!.\n"
        exit 1
    }
}
