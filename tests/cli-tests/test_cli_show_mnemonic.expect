#!/usr/bin/env expect

# Start the CLI program for showing mnemonic phrase
spawn bash kc show-mnemonic

# Capture full output
set output ""
expect {
    -re "(.*)\n" {
        append output $expect_out(1,string) " "
        exp_continue
    }
    eof
}

# Trim any extra whitespace
set output [string trim $output]

# Function to count words
proc count_words {input} {
    set words [split $input " "]
    return [llength $words]
}

# Count words from CLI output
set word_count [count_words $output]

# Validate word count
if {$word_count == 12} {
    puts "\n‚úÖ Valid: The phrase contains exactly 12 words."
} else {
    puts "\nüî¥ Invalid: The phrase contains $word_count words instead of 12."
    exit 1
}

# Clean up
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n‚úÖ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå DB Reset Failed!.\n"
        exit 1
    }
}

foreach {key val} $argv {
    if {$key == "--ci-json"} {
        # Run docker exec to delete the file
        set result [exec docker exec kc-gatekeeper-1 rm -rf /app/gatekeeper/data/wallet.json]

        # Print result
        puts "Deleted wallet.json!"
        
    } elseif {$key == "--local"} {
        # Delete Wallet
        set script_dir [file dirname [file normalize [info script]]]

        # Navigate one level up from script directory, then into kc/data/wallet.json
        set filepath [file join $script_dir ../../data/wallet.json]

        # Normalize the path to get an absolute reference
        set abs_filepath [file normalize $filepath]

        # Check if the file exists
        if {[file exists $abs_filepath]} {
            puts "File exists: $abs_filepath"
            # Delete the file
            file delete -force $abs_filepath
            puts "File deleted: $abs_filepath"
        } else {
            puts "File not found: $abs_filepath"
        }
        
    } elseif {$key == "--ci-redis"} {
        # Run docker exec to delete the file
        set result [exec docker compose exec redis redis-cli flushall]

        # Print result
        puts "Resetted Redis!"
    }
}

spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n‚úÖ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå Wallet Reset Failed!.\n"
        exit 1
    }
}