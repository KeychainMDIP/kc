#!/usr/bin/env expect

# Set timeout to avoid infinite waits
set timeout 30

#debugger
log_user 1


# Start the CLI program you want to test
spawn bash kc create-id "qa-issue-creds" local

# Expect the output to match a string like did:test followed by some characters (e.g., did:test12345)
expect {
    -re "(did:test:\[a-zA-Z0-9]+)" {
        set captured_did $expect_out(1,string)
        puts "\n✅ Captured DID: $captured_did"
    }
    timeout {
        puts "\n❌ Timeout waiting for expected output"
        exit 1
    }
}

# Start the CLI program
spawn bash kc create-schema -n "nickname-template" share/schema/social-media.json

# Look for the specific DID pattern
expect {
    -re "(did:test:\[a-zA-Z0-9]+)" {
        set captured_did_1 $expect_out(1,string)
        puts "\n✅ Captured DID: $captured_did_1"
    }
    timeout {
        puts "\n❌ Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n❌ End of file reached without finding a match"
        exit 1
    }
}

# Verify the captured DID
if {$captured_did_1 eq ""} {
    puts "No DID was captured! \n❌"
    exit 1
}

# Use the captured value in another function call
spawn bash -c {kc bind-credential nickname-template qa-issue-creds > qa-credential.json}
sleep 2
spawn bash -c {jq '.credential.nickname |= "qa"' qa-credential.json > qa-credential-final.json}
sleep 2
spawn bash -c "docker compose cp qa-credential-final.json cli:/app/share"
sleep 2
spawn bash -c "kc issue-credential share/qa-credential-final.json"
sleep 1
expect {
    -re {(did:test:[a-zA-Z0-9]+)} {
        set captured_did_2 $expect_out(1,string)
        puts "\n✅ Captured DID: $captured_did_2"
    }
    timeout {
        puts "\n❌ Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n❌ End of file reached without finding a match"
        exit 1
    }
}

spawn bash -c "kc accept-credential $captured_did_2 nicknames"

expect {
    # Pass if "OK" is found
    -re "OK" {
        puts "Success, found 'OK' in output \n✅"
    }

    # Timeout handling
    timeout {
        puts "Timeout occurred \n❌"
        exit 1
    }

    # Default match (successful case)
    eof {
        puts "Process completed successfully \n✅"
        exit 0
    }
}

spawn bash -c "kc list-credentials"

expect {
    # Pass if "DID" is found
    -re {(did:test:[a-zA-Z0-9]+)} {
        puts "Success, found 'DID' in output \n✅"
    }

    # Timeout handling
    timeout {
        puts "Timeout occurred \n❌"
        exit 1
    }
}

# Clean up
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n✅ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n❌ DB Reset Failed!.\n"
        exit 1
    }
}

# Delete Schema on docker
spawn bash -c "docker compose exec cli rm -rf /app/share/qa-credential-final.json"

# Delete Wallet and Credential Files
set script_dir [file dirname [file normalize [info script]]]

# File paths to delete
set wallet_path [file join $script_dir ../../data/wallet.json]
set qa_cred_path [file join $script_dir ../qa-credential.json]
set qa_cred_final_path [file join $script_dir ../qa-credential-final.json]

# List of files to process
set files_to_delete [list $wallet_path $qa_cred_path $qa_cred_final_path]

# Process each file
foreach filepath $files_to_delete {
    # Normalize the path to get an absolute reference
    set abs_filepath [file normalize $filepath]

    # Check if the file exists
    if {[file exists $abs_filepath]} {
        puts "File exists: $abs_filepath"
        # Delete the file
        file delete -force $abs_filepath
        puts "File deleted: $abs_filepath"
    } else {
        puts "File not found: $abs_filepath"
    }
}

spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n✅ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n❌ Wallet Reset Failed!.\n"
        exit 1
    }
}
