#!/usr/bin/env expect

# Set timeout to avoid infinite waits
set timeout 30

# Enable output logging
log_user 1

# Start the CLI program to create an ID
spawn bash kc create-id "qa-issue-creds" local
expect {
    -re {(did:test:[a-zA-Z0-9]+)} {
        set captured_did $expect_out(0,string)
        puts "\n‚úÖ Captured DID: $captured_did"
    }
    timeout {
        puts "\n‚ùå Timeout waiting for expected output"
        exit 1
    }
}

# Create a schema
spawn bash kc create-schema -n "nickname-template" share/schema/social-media.json
expect {
    -re {(did:test:[a-zA-Z0-9]+)} {
        set captured_did_1 $expect_out(0,string)
        puts "\n‚úÖ Captured DID: $captured_did_1"
    }
    timeout {
        puts "\n‚ùå Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n‚ùå End of file reached without finding a match"
        exit 1
    }
}

# Verify the captured DID
if {![info exists captured_did_1] || $captured_did_1 eq ""} {
    puts "No DID was captured! \n‚ùå"
    exit 1
}

# Use the captured value in another function call
spawn bash -c {kc bind-credential nickname-template qa-issue-creds > qa-credential.json}
expect eof

spawn bash -c {jq '.credential.nickname |= "qa"' qa-credential.json > qa-credential-final.json}
expect eof

spawn bash -c "docker compose cp qa-credential-final.json cli:/app/share"
expect eof

spawn bash -c "kc issue-credential share/qa-credential-final.json"
expect {
    -re {(did:test:[a-zA-Z0-9]+)} {
        set captured_did_2 $expect_out(0,string)
        puts "\n‚úÖ Captured DID: $captured_did_2"
    }
    timeout {
        puts "\n‚ùå Timeout occurred while waiting for output"
        exit 1
    }
    eof {
        puts "\n‚ùå End of file reached without finding a match"
        exit 1
    }
}

if {![info exists captured_did_2] || $captured_did_2 eq ""} {
    puts "\n‚ùå Failed to capture DID from issued credential"
    exit 1
}

# Accept the credential
spawn bash -c "kc accept-credential $captured_did_2 nicknames"
expect {
    -re {OK} {
        puts "Success, found 'OK' in output \n‚úÖ"
    }
    timeout {
        puts "Timeout occurred \n‚ùå"
        exit 1
    }
}

# Reveal credential
spawn bash -c "kc reveal-credential $captured_did_2"
expect {
    -re {(\{(?:.|\n)*\})} {
        set output $expect_out(1,string)
    }
    timeout {
        puts "Test failed: Timeout waiting for output."
        exit 1
    }
}

# Validation procedure
proc validate_wallet_output {output} {
    set validation_passed 1
    set validation_details {}
    set validated_keys {}

    set required_keys [list \
        "type" \
        "issuer" \
        "validFrom" \
        "credentialSubject" \
        "credential" \
        "signature" \
    ]

    foreach key $required_keys {
        if {[string first "\"$key\":" $output] != -1} {
            if {![regexp "\"$key\"\\s*:\\s*null" $output]} {
                lappend validated_keys "\n‚úÖ Key present and not null: $key"
            } else {
                lappend validation_details "\n‚ùå Null value for key: $key"
                set validation_passed 0
                exit 1
            }
        } else {
            lappend validation_details "\n‚ùå Missing key: $key"
            set validation_passed 0
            exit 1
        }
    }

    puts "\nValidation Details:"
    foreach detail $validated_keys {
        puts $detail
    }
    foreach detail $validation_details {
        puts $detail
    }

    if {$validation_passed} {
        puts "\n‚úÖ Validation Passed: All required keys present, no null values"
        return 1
    } else {
        puts "\nüî¥ Validation Failed: Missing or null values found"
        return 0
    }
}

# Run validation
validate_wallet_output $output

# Reset DB
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n‚úÖ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå DB Reset Failed!\n"
        exit 1
    }
}

foreach {key val} $argv {
if {$key == "--ci-json"} {
        # Delete docker files
        set result [exec docker exec kc-gatekeeper-1 rm -rf /app/gatekeeper/data/wallet.json]
        puts "Deleted wallet.json!"

        # Delete credential file from local script path
        set script_dir [file dirname [file normalize [info script]]]
        set qa_cred_path [file join $script_dir qa-credential.json]
        set files_to_delete [list $qa_cred_path]

        foreach filepath $files_to_delete {
            set abs_filepath [file normalize $filepath]
            if {[file exists $abs_filepath]} {
                puts "File exists: $abs_filepath"
                file delete -force $abs_filepath
                puts "File deleted: $abs_filepath"
            } else {
                puts "File not found: $abs_filepath"
            }
        }

    } elseif {$key == "--local"} {
        # Delete Schema on docker
        spawn bash -c "docker compose exec cli rm -rf /app/share/qa-credential-final.json"

        # Delete Wallet and Credential Files
        set script_dir [file dirname [file normalize [info script]]]
        set wallet_path [file join $script_dir ../../data/wallet.json]
        set qa_cred_path [file join $script_dir ../qa-credential.json]
        set qa_cred_final_path [file join $script_dir ../qa-credential-final.json]
        set files_to_delete [list $wallet_path $qa_cred_path $qa_cred_final_path]

        foreach filepath $files_to_delete {
            set abs_filepath [file normalize $filepath]
            if {[file exists $abs_filepath]} {
                puts "File exists: $abs_filepath"
                file delete -force $abs_filepath
                puts "File deleted: $abs_filepath"
            } else {
                puts "File not found: $abs_filepath"
            }
        }

    } elseif {$key == "--ci-redis"} {
        # Flush Redis data
        set result [exec docker compose exec redis redis-cli flushall]
        puts "Resetted Redis!"

        # Delete credential file
        set script_dir [file dirname [file normalize [info script]]]
        set qa_cred_path [file join $script_dir qa-credential.json]
        set files_to_delete [list $qa_cred_path]

        foreach filepath $files_to_delete {
            set abs_filepath [file normalize $filepath]
            if {[file exists $abs_filepath]} {
                puts "File exists: $abs_filepath"
                file delete -force $abs_filepath
                puts "File deleted: $abs_filepath"
            } else {
                puts "File not found: $abs_filepath"
            }
        }
    }
}

# Reset wallet
spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n‚úÖ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå Wallet Reset Failed!\n"
        exit 1
    }
}
