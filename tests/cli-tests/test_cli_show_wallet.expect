#!/usr/bin/env expect -f

# Wallet Show Validation Script

# Set timeout for commands
set timeout 10

# Start the CLI program for wallet creation
spawn bash kc "show-wallet"

# Null value validation procedure
proc validate_no_null_values {output} {
    # Initialize validation tracking
    set validation_passed 1
    set validation_details {}

    # Check for explicit null values in top-level keys
    set top_level_keys [list "seed" "counter" "ids" "current"]
    foreach key $top_level_keys {
        if {[string first "\"$key\": null" $output] != -1} {
            lappend validation_details "\n‚ùå Top-level key '$key' is null"
            set validation_passed 0
        } else {
            lappend validation_details "\n‚úÖ Top-level key '$key' is not null"
        }
    }

    # Check nested keys 0
    set nested_keys_0 [list "mnemonic" "hdkey"]
    foreach key $nested_keys_0 {
        if {[string first "\"$key\": null" $output] != -1} {
            lappend validation_details "\n‚ùå Nested key '$key' is null"
            set validation_passed 0
        } else {
            lappend validation_details "\n‚úÖ Nested key '$key' is not null"
        }
    }

    # Check nested keys 1
    set nested_keys_1 [list "xpriv" "xpub"]
    foreach key $nested_keys_1 {
        if {[string first "\"$key\": null" $output] != -1} {
            lappend validation_details "\n‚ùå Nested '$key' is null"
            set validation_passed 0
        } else {
            lappend validation_details "\n‚úÖ Nested '$key' is not null"
        }
    }

    # Check nested ids keys
    set ids_keys [list "did" "account" "index"]
    foreach key $ids_keys {
        if {[string first "\"$key\": null" $output] != -1} {
            lappend validation_details "\n‚ùå IDs key '$key' is null"
            set validation_passed 0
        } else {
            lappend validation_details "\n‚úÖ IDs key '$key' is not null"
        }
    }

    # Print out all validation details
    puts "\nValidation Details:"
    foreach detail $validation_details {
        puts $detail
    }

    # Final validation summary
    if {$validation_passed} {
        puts "\n‚úÖ Validation Passed: No null values detected"
        return 1
    } else {
        puts "\nüî¥ Validation Failed: Null values found"
        return 0
    }
}

# Capture the full output
set output ""
expect {
    -re ".*" {
        append output $expect_out(0,string)
    }
    timeout {
        puts "Test failed: Timeout waiting for output."
        exit 1
    }
}

# Print captured output for debugging
puts "Captured Command Output:\n$output"

# Clean up
spawn bash admin reset-db
expect {
    "true" {
        send_user "\n‚úÖ DB Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå DB Reset Failed!.\n"
        exit 1
    }
}

foreach {key val} $argv {
    if {$key == "--ci"} {
        # Run docker exec to delete the file
        set result [exec docker exec kc-gatekeeper-1 rm -rf /app/gatekeeper/data/wallet.json]

        # Print result
        puts "Deleted wallet.json!"
        
    } elseif {$key == "--local"} {
        # Delete Wallet
        set script_dir [file dirname [file normalize [info script]]]

        # Navigate one level up from script directory, then into kc/data/wallet.json
        set filepath [file join $script_dir ../../data/wallet.json]

        # Normalize the path to get an absolute reference
        set abs_filepath [file normalize $filepath]

        # Check if the file exists
        if {[file exists $abs_filepath]} {
            puts "File exists: $abs_filepath"
            # Delete the file
            file delete -force $abs_filepath
            puts "File deleted: $abs_filepath"
        } else {
            puts "File not found: $abs_filepath"
        }
        
    }
}

spawn bash kc create-wallet
expect {
    "true" {
        send_user "\n‚úÖ Wallet Reset Complete!\n"
    }
    timeout {
        send_user "\n‚ùå Wallet Reset Failed!.\n"
        exit 1
    }
}